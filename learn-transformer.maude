fmod LEARN-SIG is
	pr QID . pr STRING .
	sorts SetObj CourseDecl ObjSpecs LearnCourse CourseID CourseSpecs ExDecl StrID SetStr TeachStrDecl StrDecl LearnID
		StrExp LearnObjDecl SetLOAttrib ObjAttrib LearnObjDecls .
	subsort LearnID < SetObj .
	subsort String < CourseID .
	subsort ExDecl TeachStrDecl < CourseSpecs .
	subsort StrDecl < SetStr .
 ---	subsort CourseID < LearnID .
	subsort LearnID < StrExp .
	subsort ObjAttrib < SetLOAttrib .
	subsort LearnObjDecl < LearnObjDecls .

	op <_> : Qid -> LearnID .

	--- Course declarations
	op _,_ : SetObj SetObj -> SetObj [prec 10 assoc comm id: none] .
	op _ _ : CourseDecl LearnObjDecls -> LearnCourse [prec 70] .
	op course on_teaches_ : CourseID LearnID -> CourseDecl [prec 50] .
	op course on_teaches_and_ : CourseID SetObj LearnID -> CourseDecl [prec 50] .
	op course on_teaches_with_ : CourseID LearnID CourseSpecs -> CourseDecl [prec 50] .
	op course on_teaches_and_with_ : CourseID SetObj LearnID CourseSpecs -> CourseDecl [prec 50] .
	op none : -> LearnID .
	op none : -> CourseSpecs .
	op _ _ : CourseSpecs CourseSpecs -> CourseSpecs [prec 30 assoc comm id: none] .

	--- Exercise declarations
	op exercise_ : LearnID -> ExDecl .
	op exercises_and_ : SetObj LearnID -> ExDecl [prec 20] .

	--- Strategy declarations
	op teaching strategy_ _ : LearnID SetStr -> TeachStrDecl [prec 20] .
	op _,_ : SetStr SetStr -> SetStr [prec 10 assoc comm] .
	op _before_ : StrExp StrExp -> StrDecl [prec 5] .
	op _after_ : StrExp StrExp -> StrDecl [prec 5] .
	ops exercises the`exercises all : -> StrExp .
	op _-_ : StrExp StrExp -> StrExp [prec 3] .
	op _but_ : StrExp StrExp -> StrExp [prec 3] .

	--- Learning object declarations
	op learning object_has title_ : LearnID String -> LearnObjDecl [prec 50] .
	op learning object_has title__ : LearnID String SetLOAttrib -> LearnObjDecl [prec 50] .
	op text_ : String -> ObjAttrib [prec 20] .
	op image_ : String -> ObjAttrib [prec 20] .
	op __ : SetLOAttrib SetLOAttrib -> SetLOAttrib [prec 30 assoc comm] .
	op __ : LearnObjDecls LearnObjDecls -> LearnObjDecls [prec 60 assoc comm] .

	var S : CourseID . vars O O1 O2 : LearnID . var LO : SetObj . vars SE1 SE2 : StrExp . var CS : CourseSpecs .

	eq course on S teaches O = course on S teaches O and none with none .
	eq course on S teaches LO and O = course on S teaches LO and O with none .
	eq course on S teaches O with CS = course on S teaches O and none with CS .

	eq the exercises = exercises .
	eq SE1 but SE2 = SE1 - SE2 .
endfm

fmod LEARN is
	pr NAT . pr STRING . pr FLOAT . pr QID .
	sorts LearningObject Strategy .
	op lo : String -> LearningObject [ctor] .
	op st : String -> Strategy [ctor] .
	ops title text image : LearningObject -> String .
	var L : LearningObject .
	eq text(L) = "" [owise] .
	eq image(L) = "" [owise] .
endfm

fmod LO-LIST is
	pr LEARN .
	sort LOList .
	subsort LearningObject < LOList .
	op mtlist : -> LOList .
	op _;_ : LOList LOList -> LOList [assoc id: mtlist] .
endfm

mod LO-SET is
	pr LEARN .
	sort LOSet .
	subsort LearningObject < LOSet .
	op mtset : -> LOSet .
	op __ : LOSet LOSet -> LOSet [assoc comm id: mtset] .
	op choose : LOSet ~> LearningObject .
	op _-_ : LOSet LOSet -> LOSet .
	op _diff_ : LOSet LOSet ~> LearningObject .
	op _subset_ : LOSet LOSet -> Bool .
	var A : LearningObject . vars AS AS' : LOSet .
	eq (AS AS') - AS = AS' .
	eq AS - AS' = AS [owise] .
	eq (A AS) diff AS = A .
	eq AS subset (AS AS') = true .
	eq AS subset AS' = false [owise] .
	rl choose(A AS) => A .
endm

mod STATE is
	pr LO-LIST . pr LO-SET .
	sort State .
	op state : Strategy LOSet LOList -> State .
endm

mod STRATEGY is
	pr STATE .
	op init : Strategy -> State .
	ops all exercises : -> LOSet .
	op pred : Strategy LearningObject -> LOSet .
	op _contained_ : LOSet LOList -> Bool .
	vars A B : LearningObject . vars AL L1 L2 : LOList . var AS : LOSet . var S : Strategy .
	eq init(S) = state(S, all, mtlist) .
	eq mtset contained AL = true .
	ceq (A AS) contained (L1 ; A ; L2) = true if AS contained (L1 ; L2) .
	eq AS contained AL = false [owise] .
	eq pred(S, LO:LearningObject) = mtset [owise] .
	crl state(S, AS, mtlist) => state(S, (AS - A), A) if choose(AS) => A /\ pred(S, A) = mtset .
	crl state(S, AS, AL) => state(S, (AS - A) B, AL ; A) if choose(AS) => A /\ B := all diff AS /\ pred(S, A) contained AL /\ AL =/= mtlist .
endm

mod TRANSFORM-LEARN is
	inc LEARN-SIG .
	inc STRATEGY .
	inc META-LEVEL .

	var S : String . var SObj : SetObj . var Lid : LearnID . var Cid : CourseID . var Str : StrDecl .
	var LOdecls : LearnObjDecls . var CS : CourseSpecs . var Q : Qid . var SStr : SetStr .
	var OAt : ObjAttrib . var SAt : SetLOAttrib . vars Ext1 Ext2 : StrExp .

	op str : LearnID -> String .
	eq str(< Q >) = string(Q) .
	op q : CourseID -> Qid .
	eq q(S) = qid(S) .

	op transformLearnCourse : LearnCourse -> SModule .
	eq transformLearnCourse(course on Cid teaches SObj and Lid with CS LOdecls) =
		mod q(Cid) is
			(including 'BOOL . including 'STRATEGY .)
			sorts none .
			none
			none
			none
			(eq 'all.LOSet = transformOverSetObj(SObj, Lid) [none] .)
			 transformCourseSpecs(CS) transformLearnObjDecls(LOdecls)
			none
		endm
	.

	op transformOverSetObj : SetObj LearnID -> Term .
	eq transformOverSetObj(Lid, none) = transformLearnID(Lid) .
	eq transformOverSetObj(SObj, Lid) = '__[transformSetObj(SObj), transformLearnID(Lid)] [owise] .

	op transformSetObj : SetObj -> Term .
	eq transformSetObj(Lid) = transformLearnID(Lid) .
	eq transformSetObj(Lid, SObj) = '__[transformLearnID(Lid), transformSetObj(SObj)] .

	op transformLearnID : LearnID -> Term .
	eq transformLearnID(Lid) = 'lo[upTerm(str(Lid))] .

	op transformCourseSpecs : CourseSpecs -> EquationSet .
	eq transformCourseSpecs(none) = none .
	eq transformCourseSpecs(exercise Lid CS) = (eq 'exercises.LOSet = transformLearnID(Lid) [none] .) transformCourseSpecs(CS) .
	eq transformCourseSpecs(exercises SObj and Lid CS) = (eq 'exercises.LOSet = transformOverSetObj(SObj, Lid) [none] .) transformCourseSpecs(CS) .
	eq transformCourseSpecs(teaching strategy Lid SStr CS) = transformSetStr(Lid, SStr) transformCourseSpecs(CS) .

	op transformSetStr : LearnID SetStr -> EquationSet .
	eq transformSetStr(Lid, Str) = transformStrDecl(Lid, Str) .
	eq transformSetStr(Lid, Str, SStr) = transformStrDecl(Lid, Str) transformSetStr(Lid, SStr) .

	op transformStrDecl : LearnID StrDecl -> EquationSet .
	eq transformStrDecl(Lid, Ext1 after Ext2) = (ceq 'pred['st[upTerm(str(Lid))], 'LO:LearningObject] = transformStrExp(Ext2) if '_subset_['LO:LearningObject, transformStrExp(Ext1)] = 'true.Bool [none] .) .
	eq transformStrDecl(Lid, Ext1 before Ext2) = (ceq 'pred['st[upTerm(str(Lid))], 'LO:LearningObject] = transformStrExp(Ext1) if '_subset_['LO:LearningObject, transformStrExp(Ext2)] = 'true.Bool [none] .) .

	op transformStrExp : StrExp -> Term .
	eq transformStrExp(all) = 'all.LOSet .
	eq transformStrExp(exercises) = 'exercises.LOSet .
	eq transformStrExp(Lid) = transformLearnID(Lid) .
	eq transformStrExp(Ext1 - Ext2) = '_-_[transformStrExp(Ext1), transformStrExp(Ext2)] .

	op transformLearnObjDecls : LearnObjDecls -> EquationSet .
	eq transformLearnObjDecls(LOdecl:LearnObjDecl) = transformLearnObjDecl(LOdecl:LearnObjDecl) .
	eq transformLearnObjDecls(LOdecl:LearnObjDecl LOdecls) = transformLearnObjDecl(LOdecl:LearnObjDecl) transformLearnObjDecls(LOdecls) .

	op transformLearnObjDecl : LearnObjDecl -> EquationSet .
	eq transformLearnObjDecl(learning object Lid has title S) = (eq 'title['lo[upTerm(str(Lid))]] = upTerm(S) [none] .) .
	eq transformLearnObjDecl(learning object Lid has title S SAt) = (eq 'title['lo[upTerm(str(Lid))]] = upTerm(S) [none] .) transformSetLOAttrib(Lid, SAt) .

	op transformSetLOAttrib : LearnID SetLOAttrib -> EquationSet .
	eq transformSetLOAttrib(Lid, OAt) = transformObjAttrib(Lid, OAt) .
	eq transformSetLOAttrib(Lid, OAt SAt) = transformObjAttrib(Lid, OAt) transformSetLOAttrib(Lid, SAt) .

	op transformObjAttrib : LearnID ObjAttrib -> Equation .
	eq transformObjAttrib(Lid, text S) = (eq 'text['lo[upTerm(str(Lid))]] = upTerm(S) [none] .) .
	eq transformObjAttrib(Lid, image S) = (eq 'image['lo[upTerm(str(Lid))]] = upTerm(S) [none] .) .
endm

mod toHTML is
	pr TRANSFORM-LEARN .

	var module : SModule . vars T T' TS : Term . var AS : AttrSet .
	var EC : EqCondition . vars S S1 S2 : String . vars L LOS PredSet : LOSet .
	vars SL SL2 : StringList . var LO : LearningObject . var EqtS : EquationSet .
	op error : -> [LOSet] .
	op error : -> [String] .

	sorts StringList SSet .
	subsort String < StringList .
	op mtlist : -> StringList .
	op _,_ : StringList StringList -> StringList [assoc comm id: mtlist] .
	op mtset : -> SSet .
	op <_> : StringList -> SSet .
	op _+_ : SSet SSet -> SSet [assoc comm id: mtset] .
	eq < mtlist > = mtset .
	eq < S , S, SL > = < S, SL > .
	eq < SL > + < SL2 > = < SL , SL2 > .

	op setToString : SSet -> String .
	eq setToString(mtset) = "<script type=\"text/javascript\">init(\"default\")</script>" .
	eq setToString(< S >) =  "<script type=\"text/javascript\">init(\"" + S:String + "\")</script>" .
	ceq setToString(< S , SL >) = "Estrategia:<br>\n" + makeStrString(< S , SL >) if SL:StringList =/= mtlist .
	op makeStrString : SSet -> String .
	eq makeStrString(mtset) = "" .
	eq makeStrString(< S , SL >) = "<a href=\"#\" onclick='init(\"" + S:String + "\");return false;'>" + S:String + "</a><br>\n" + makeStrString(< SL >) .

	op convertHTML : SModule -> String .
	eq convertHTML(module) = "<html>\n<head>\n<title>" + string(getName(module)) + "</title>\n<script type=\"text/javascript\">\n"
							+ "var list = []; var strategy;\nfunction contained(set){\nfor (var i = 0; i < set.length; i++)\nif(list.lastIndexOf(set[i]) == -1) return false;\nreturn true;\n}\n"
							+ "function init(str){\nstrategy = str;\ndocument.body.innerHTML = '<center><b><big><big>" + string(getName(module)) + "</big></big></b></center><br>' + links('');\n}\n"
							+ "function pred(lo){\n" + convertPredEqs(module, getEqs(module)) + "return [];\n}\n"
							+ "function links(last){\nvar linkList = \"\";\n" + createLinks(module, downTerm(getTerm(metaReduce(module, 'all.LOSet)), error)) + "return linkList;\n}\n"
							+ createLOFunctions(module, downTerm(getTerm(metaReduce(module, 'all.LOSet)), error))
							+ "</script>\n</head>\n<body>\n"
							+ insertStr(getEqs(module))
							+ "\n</body>\n</html>\n"
	.

	op convertPredEqs : Module EquationSet -> String .
	eq convertPredEqs(module, none) = "" .
	eq convertPredEqs(module, eq T = T' [AS] . EqtS) = convertPredEqs(module, EqtS) .
	eq convertPredEqs(module, ceq 'pred['st[TS], 'LO:LearningObject] = T if '_subset_['LO:LearningObject, T'] = 'true.Bool [AS] . EqtS)
		= createIF(downTerm(TS, error), downTerm(getTerm(metaReduce(module, T')), error), downTerm(getTerm(metaReduce(module, T)), error)) + convertPredEqs(module, EqtS) .

	op createIF : String LOSet LOSet -> String .
	eq createIF(S, mtset, PredSet) = "" .
	eq createIF(S, lo(S1) LOS, PredSet) = "if(strategy == '" + S + "' && lo == '" + S1 + "') return [" + convertPredSet(PredSet) + "];\n" + createIF(S, LOS, PredSet) .

	op convertPredSet : LOSet -> String .
	eq convertPredSet(mtset) = "" .
	eq convertPredSet(lo(S)) = "'" + S + "'" .
	eq convertPredSet(lo(S) LOS) = "'" + S + "'," + convertPredSet(LOS) .

	op createLinks : Module LOSet -> String .
	eq createLinks(module, mtset) = "" .
	---eq createLinks(module, lo(S) LOS) = "if(last != '" + S + "' && contained(pred('" + S + "'))) linkList += '<br><a href=\"#\" onclick=\"" + S + "();return false\">" + downTerm(getTerm(metaReduce(module, 'title['lo[upTerm(S)]])), error) + "</a>';\n" + createLinks(module, LOS) .
	eq createLinks(module, lo(S) LOS) = "if(contained(pred('" + S + "'))) linkList += '<br><a href=\"#\" onclick=\"" + S + "();return false\">" + downTerm(getTerm(metaReduce(module, 'title['lo[upTerm(S)]])), error) + "</a>';\n" + createLinks(module, LOS) .
	
	op createLOFunctions : Module LOSet -> String .
	eq createLOFunctions(module, mtset) = "" .
	eq createLOFunctions(module, lo(S) LOS) = "function " + S + "(){\nlist.push('" + S + "');\nvar prt = '<div style=\"text-align: center;\"><b><big><big>"
											+ downTerm(getTerm(metaReduce(module, 'title['lo[upTerm(S)]])), error) + "</big></big></b></div><br>"
											+ insertImg(module, lo(S)) + insertTxt(module, lo(S)) + "';\nprt += links('" + S + "');\ndocument.body.innerHTML = prt;\n}\n"
											+ createLOFunctions(module, LOS)
	.

	op insertImg : Module LearningObject -> String .
	ceq insertImg(module, lo(S)) = "<br><img src=\"" + downTerm(getTerm(metaReduce(module, 'image['lo[upTerm(S)]])), error) + "\"><br>" if downTerm(getTerm(metaReduce(module, 'image['lo[upTerm(S)]])), error) =/= "" .
	eq insertImg(module, LO) = "" [owise] .

	op insertTxt : Module LearningObject -> String .
	ceq insertTxt(module, lo(S)) = downTerm(getTerm(metaReduce(module, 'text['lo[upTerm(S)]])), error) + "<br>" if downTerm(getTerm(metaReduce(module, 'text['lo[upTerm(S)]])), error) =/= "" .
	eq insertTxt(module, LO) = "" [owise] .

	op insertStr : EquationSet -> String .
	eq insertStr(EqtS) = setToString(collectStr(EqtS)) .

	op collectStr : EquationSet -> SSet .
	eq collectStr(none) = mtset .
	eq collectStr(eq T = T' [AS] . EqtS) = collectStr(EqtS) .
	eq collectStr(ceq 'pred['st[TS], 'LO:LearningObject] = T if '_subset_['LO:LearningObject, T'] = 'true.Bool [AS] . EqtS) = < downTerm(TS, error) > + collectStr(EqtS) .
endm

mod CMD is
	inc TRANSFORM-LEARN .
	inc toHTML .

	op st : -> [State] .
	op lObj : -> [LearningObject] .
	op loSet : -> [LOSet] .
	op loList : -> [LOList] .

	var LC : LearnCourse . var T : Term . var Q : Qid .
	var B : Bound . var N : Nat . var S : State .

	op transform : LearnCourse -> Module .
	eq transform(LC) = transformLearnCourse(LC) .
	op reduce : LearnCourse Term -> Term .
	eq reduce(LC, T) = getTerm(metaReduce(transform(LC), T)) .
	op search : LearnCourse Qid Bound Nat -> State .
	eq search(LC, Q, B, N) = downTerm(getTerm(metaSearch(transform(LC), 'init['st[upTerm(string(Q))]], 'S:State, nil, '*, B, N)), st) .
	op search : LearnCourse Qid Nat -> State .
	eq search(LC, Q, N) = search(LC, Q, unbounded, N) .
	op dsearch : LearnCourse Qid Nat -> State .
	eq dsearch(LC, Q, N) = search(LC, Q, N)  .
	op dsearch : LearnCourse Nat -> State .
	eq dsearch(LC, N) = search(LC, 'default, N) .
	op path : LearnCourse Qid Bound Nat -> Trace .
	eq path(LC, Q, B, N) = metaSearchPath(transform(LC), 'init['st[upTerm(string(Q))]], 'S:State, nil, '*, B, N) .
	op path : LearnCourse Qid Nat -> Trace .
	eq path(LC, Q, N) = path(LC, Q, unbounded, N) .

	op html : LearnCourse -> String .
	eq html(LC) = convertHTML(transform(LC)) .
endm

mod TEST is
	pr CMD .
	ops eg1 eg2 eg3 : -> LearnCourse .
	eq eg1 =
		course on "Linguagens Formais"
			teaches < 'int3 >, < 'sec3_2 >, < 'sec3_1 >, < 'fig3_2 >, < 'ex3_1 > and < 'ex3_2 >
		learning object < 'int3 > has
			title "Introducao ao Capitulo 3"
			image "auto.png"
			text "O estudo das linguagens regulares..."
		learning object < 'sec3_2 > has
			title "Secao 3.2"
			text "A construcao de um sistema e, em geral..."
		learning object < 'sec3_1 > has
			title "Secao 3.1"
			text "Um sistema de estados finitos e um modelo matematico..."
		learning object < 'fig3_2 > has
			title "Figura 3.2"
			image "figura3.2.png"
			text "Diagrama (AFD): transicao"
		learning object < 'ex3_1 > has
			title "Exercicio 3.1"
			text "Sobre as linguagens regulares:..."
		learning object < 'ex3_2 > has
			title "Exercicio 3.2"
			text "Desenvolva automatos finitos deterministicos..."
	.
	eq eg2 =
		course on "Linguagens Formais"
			teaches < 'int3 >, < 'sec3_2 >, < 'sec3_1 >, < 'fig3_2 >, < 'ex3_1 > and < 'ex3_2 >
		with
			exercises < 'ex3_1 > and < 'ex3_2 >
			teaching strategy < 'ex >
				exercises after all but the exercises
		learning object < 'int3 > has
			title "Introducao ao Capitulo 3"
			image "auto.png"
			text "O estudo das linguagens regulares..."
		learning object < 'sec3_2 > has
			title "Secao 3.2"
			text "A construcao de um sistema e, em geral..."
		learning object < 'sec3_1 > has
			title "Secao 3.1"
			text "Um sistema de estados finitos e um modelo matematico..."
		learning object < 'fig3_2 > has
			title "Figura 3.2"
			image "figura3.2.png"
			text "Diagrama (AFD): transicao"
		learning object < 'ex3_1 > has
			title "Exercicio 3.1"
			text "Sobre as linguagens regulares:..."
		learning object < 'ex3_2 > has
			title "Exercicio 3.2"
			text "Desenvolva automatos finitos deterministicos..."
	.
	eq eg3 =
		course on "Linguagens Formais"
			teaches < 'sec2_1 >, < 'sec2_2 >, < 'sec2_4 >, < 'int3 >, < 'sec3_1 >, < 'sec3_2 >, < 'sec3_3 >, < 'fig3_2 >, < 'sec3_7 >, < 'ex3_1 > and < 'ex3_2 >
		with
			teaching strategy < 'class >
				< 'int3 > before < 'sec3_1 >,
				< 'sec3_1 > before < 'sec3_2 >,
				< 'sec3_2 > before < 'fig3_2 >,
				< 'fig3_2 > before < 'sec2_1 >,
				< 'sec2_1 > before < 'sec2_2 >,
				< 'sec2_2 > before < 'sec3_3 >,
				< 'sec3_3 > before < 'sec2_4 >,
				< 'sec2_4 > before < 'sec3_7 >,
				< 'sec3_7 > before < 'ex3_1 >,
				< 'ex3_1 > before < 'ex3_2 >
			teaching strategy < 'book >
				< 'sec2_1 > before < 'sec2_2 >,
				< 'sec2_2 > before < 'sec2_4 >,
				< 'sec2_4 > before < 'int3 >,
				< 'int3 > before < 'sec3_1 >,
				< 'sec3_1 > before < 'sec3_2 >,
				< 'sec3_2 > before < 'sec3_3 >,
				< 'sec3_3 > before < 'fig3_2 >,
				< 'fig3_2 > before < 'sec3_7 >,
				< 'sec3_7 > before < 'ex3_1 >,
				< 'ex3_1 > before < 'ex3_2 >
		learning object < 'int3 > has
			title "Introducao ao Capitulo 3"
			image "auto.png"
			text "O estudo das linguagens regulares..."
		learning object < 'sec2_1 > has
			title "Secao 2.1"
			text "alfabeto"
		learning object < 'sec2_2 > has
			title "Secao 2.2"
			text "palavra"
		learning object < 'sec2_4 > has
			title "Secao 2.4"
			text "gramatica"
		learning object < 'sec3_1 > has
			title "Secao 3.1"
			text "Um sistema de estados finitos e um modelo matematico..."
		learning object < 'sec3_2 > has
			title "Secao 3.2"
			text "A construcao de um sistema e, em geral..."
		learning object < 'sec3_3 > has
			title "Secao 3.3"
			text "automato finito..."
		learning object < 'sec3_7 > has
			title "Secao 3.7"
			text "gramatica regular..."
		learning object < 'fig3_2 > has
			title "Figura 3.2"
			image "figura3.2.png"
			text "Diagrama (AFD): transicao"
		learning object < 'ex3_1 > has
			title "Exercicio 3.1"
			text "Sobre as linguagens regulares:..."
		learning object < 'ex3_2 > has
			title "Exercicio 3.2"
			text "Desenvolva automatos finitos deterministicos..."
	.
endm